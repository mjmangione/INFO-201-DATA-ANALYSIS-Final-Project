print(birthday_2019)
change_year <- function(date) {
return(format(as.Date(date)),"%m,%d,%2019")
}
birthday_2019 <- lapply(birthday,format_to_date)
print(birthday_2019)
bday_announcements <- mapply(make_birthday_announcement, names(birthday_2019),birthday)
print(bday_announcements)
bday_announcements <- mapply(make_birthday_announcement, names(birthday_2019),birthday_2019)
print(bday_announcements)
change_year <- function(date) {
return(as.Date(date)),"%m,%d,%2019")
}
?return
change_year <- function(date) {
return(as.Date(date),"%m,%d,%2019")
}
birthday_2019 <- lapply(birthday,change_year)
print(birthday_2019)
change_year <- function(date) {
return(as.Date(date),"%m/%d/%2019")
}
birthday_2019 <- lapply(birthday,change_year)
print(birthday_2019)
birthday <- list(
duleep = as.Date("1997-05-01"),
andrea = as.Date("1963-07-21"),
dillon = as.Date("1959-06-24")
)
parent_bdays <- (format(birthday$duleep,"%m/%d"))
print(parent_bdays)
change_year <- function(date) {
return(as.Date(date),"%m/%d/%2019")
}
#function that creates bithday list of 2019
birthday_2019 <- lapply(birthday,change_year)
print(birthday_2019)
spring_break <- as.Date("2019-03-16")
today <- Sys.Date()
days_to_break <- spring_break - today
print(days_to_break)
birthday <- list(
duleep = as.Date("1997-05-01"),
andrea = as.Date("1963-07-21"),
dillon = as.Date("1959-06-24")
)
parent_bdays <- (format(birthday$duleep,"%m/%d"))
print(parent_bdays)
change_year <- function(date) {
return(as.Date(date),"%m/%d/%2019")
}
#function that creates bithday list of 2019
birthday_2019 <- lapply(birthday,change_year)
print(birthday_2019)
change_year <- function(date) {
return(as.Date(date),"%m/%d/%2019")
}
birthday_2019 <- lapply(birthday,change_year)
print(birthday_2019)
as.Date(change_year) <- function(date) {
return(as.Date(date),"%m,%d,%2019")
}
spring_break <- as.Date("2019-03-16")
today <- Sys.Date()
days_to_break <- spring_break - today
print(days_to_break)
birthday <- list(
duleep = as.Date("1997-05-01"),
andrea = as.Date("1963-07-21"),
dillon = as.Date("1959-06-24")
)
parent_bdays <- (format(birthday$duleep,"%m/%d"))
print(parent_bdays)
change_year <- function(date) {
return(as.Date(date),"%m,%d,%2019")
}
#function that creates bithday list of 2019
birthday_2019 <- lapply(birthday,change_year)
change_year <- function(date) {
return(format(as.Date(date),"%m,%d,%2019"))
}
birthday_2019 <- lapply(birthday,change_year)
print(birthday_2019)
date_has_passed <- function(date) {
date <- as.Date(date)
return(date - Sys.Date() < 0)
}
date_has_passed("2019-01-03")
make_birthday_announcement <- function(name,day) {
if(date_has_passed(day)){
day <- day + 365
}
num_of_days <- abs(Sys.Date()- day)
print(paste(paste0(name, "'s")," birthday is in ",num_of_days," days"))
}
make_birthday_announcement("duleep",as.Date("2019-02-23"))
birthday_2019 <- lapply(birthday,change_year)
print(birthday_2019)
change_year <- function(date) {
return(format(as.Date(as,Date(date)),"%m,%d,%2019"))
}
birthday_2019 <- lapply(birthday,change_year)
print(birthday_2019)
change_year <- function(date) {
return(format(as.Date(date)),"%m,%d,%2019")
}
birthday_2019 <- as.Date(lapply)(birthday,change_year)
print(birthday_2019)
change_year <- function(date) {
return(format(as.Date(date)),"%m,%d,%2019")
}
birthday_2019 <- lapply(birthday,as.Date(change_year))
print(birthday_2019)
View(birthday_2019)
change_year <- function(date) {
return(format(as.Date(date)),"%m,%d,%2019")
}
birthday_2019 <- lapply(as.Date(birthday),as.Date(change_year))
print(birthday_2019)
birthday_2019 <- lapply(change_year,as.Date)
print(birthday_2019)
change_year <- function(date) {
return(format(as.Date(date)),"%m,%d,%2019")
}
birthday_2019 <- lapply(change_year,as.Date)
print(birthday_2019)
birthday_2019 <- lapply(change_year,as.Date(change_year))
print(birthday_2019)
birthday_2019 <- lapply(change_year,as.Date(change_year))
print(birthday_2019)
change_year <- function(date) {
return(format(as.Date(date)),"%m,%d,%2019")
}
birthday_2019 <- lapply(change_year,as.Date(change_year))
print(birthday_2019)
birthday_2019 <- lapply(birthday,change_year)
print(birthday_2019)
change_year <- function(date) {
return(format(as.Date(date)),"%m,%d,%2019")
}
birthday_2019 <- lapply(birthday,change_year)
print(birthday_2019)
birthdays_list <- list(
duleep = as.Date("1997-05-01"),
andrea = as.Date("1963-07-21"),
dillon = as.Date("1959-06-24")
)
parent_bday <- format(birthdays_list$duleep, "%m/%d")  # this is a string
print(parent_bday)
format(birthdays_list$duleep, "2019-%m-%d")
format(birthdays_list$duleep, "2019-%m/%d")
format(birthdays_list$duleep, "2019-%m-%d is the best day")
change_year(birthdays_list$duleep)
change_year <- function(date) {
date_in_2019_as_string <- format(date, "2019-%m-%d")
as.Date(date_in_2019_as_string)
}
change_year(birthdays_list$duleep)
birthday_2019 <- lapply(birthdays_list,change_year)
print(birthday_2019)
date_has_passed <- function(date) {
return(date - Sys.Date() < 0)
}
date_has_passed
date_has_passed <- function(date) {
return(date - Sys.Date() < 0)
}
date_has_passed("2019-01-03")
date_has_passed(  as.Date("2019-01-03")  )
make_birthday_announcement <- function(name, day) {
if(date_has_passed(day)){
day <- day + 365
}
num_of_days <- abs(Sys.Date() - day)
return(paste(paste0(name, "'s")," birthday is in ",num_of_days," days"))
}
make_birthday_announcement("duleep",as.Date("2019-02-23"))
make_birthday_announcement("duleep",as.Date("2019-01-23"))
bday_announcements <- mapply(make_birthday_announcement, names(birthday_2019),birthday_2019)
print(bday_announcements)
employees <- paste("Employer",c(1:100))
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salary_2017 <- runif(100, min=40000, max=  50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
salary_adjustment <- runif (100,5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salary_2017, salary_adjustment, stringsAsFactors = FALSE)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salary_2018 <- salaries$salaries_2017 + salaries$salary_adjustment
View(salaries)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$got_raise <- salary$salary_adjustment > 0
### Retrieve values from your data frame to answer the following questions
### Note that you should get the value as specific as possible (e.g., a single
### cell rather than the whole row!)
# What was the 2018 salary of Employee 57
View(slaries[57, "salary_2018"])
# How many employees got a raise?
nrow(salaries[salaries$got_raise == TRUE ,])
# What was the dollar value of the highest raise?
max(salaries$salary_adjustment)
# What was the "name" of the employee who received the highest raise?
salaries[salaries$salary_adjustment == max(salaries$salary_adjustment), "employees"]
salareis$salary_adjustments = max(salaries$salary_adjustment)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employer",c(1:100))
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employer",c(1:100))
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salary_2017 <- runif(100, min=40000, max=  50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
salary_adjustment <- runif (100,5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salary_2017, salary_adjustment, stringsAsFactors = FALSE)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salary_2018 <- salaries$salaries_2017 + salaries$salary_adjustment
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- salaries$salaries_2017 + salaries$salary_adjustments
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salary_2017, salary_adjustment, stringsAsFactors = FALSE)
# Create a vector of 100 employees ("Employee 1", "Employee 2", ... "Employee 100")
# Hint: use the `paste()` function and vector recycling to add a number to the word
# "Employee"
employees <- paste("Employer",c(1:100))
# Create a vector of 100 random salaries for the year 2017
# Use the `runif()` function to pick random numbers between 40000 and 50000
salary_2017 <- runif(100, min=40000, max=  50000)
# Create a vector of 100 annual salary adjustments between -5000 and 10000.
# (A negative number represents a salary decrease due to corporate greed)
# Again use the `runif()` function to pick 100 random numbers in that range.
salary_adjustment <- runif (100,-5000, 10000)
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salary_2017, salary_adjustment, stringsAsFactors = FALSE)
# Add a column to the `salaries` data frame that represents each person's
# salary in 2018 (e.g., with the salary adjustment added in).
salaries$salaries_2018 <- salaries$salaries_2017 + salaries$salary_adjustments
# Create a data frame `salaries` by combining the 3 vectors you just made
# Remember to set `stringsAsFactors=FALSE`!
salaries <- data.frame(employees, salaries_2017, salary_adjustments, stringsAsFactors = FALSE)
View(salaries)
# Add a column to the `salaries` data frame that has a value of `TRUE` if the
# person got a raise (their salary went up)
salaries$got_raise <- salary$salary_adjustment > 0
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv("data/gates_money.csv", stringsAsFactors = FALSE)
# Use the `read.csv()` functoin to read the data from the `data/gates_money.csv`
# file into a variable called `grants` using the `read.csv()`
# Be sure to set your working directory in RStudio, and do NOT treat strings as
# factors!
grants <- read.csv("data/gates_money.csv", stringsAsFactors = FALSE)
# Your script for Part 1 goes here (and delete this comment!)
names <- c("Ayan", "Anukriti", "Alvin", "Naveen", "Andrey", "Kiran" )
# Your script for Part 1 goes here (and delete this comment!)
names <- c("Ayan", "Anukriti", "Alvin", "Naveen", "Andrey", "Kiran" )
math_grades <- list (
Ayan = "89",
Anukriti = "87",
Alvin = "81",
Naveen = "96",
Andrey = "97",
Kiran = "99"
)
View(math_grades)
View(Titanic)
is.data.frame(Titanic)
Titanic <- as.data.frame(Titanic)
is.data.frame(Titanic)
children <- Titanic[Titanic$Age == "Child", ]
children_num <- sum(Titanic$Freq[Titanic$Age == "Child"])
largest_loss_number <- max(Titanic$Freq[Titanic$Survived == "No"])
largest_life_loss <- Titanic[Titanic$Freq == largest_loss_number & Titanic$Survived == "No", ]
survival_rate <- function(ticket_class){
sum_of_men <-sum(Titanic$Freq[Titanic$Survived == "Yes" & Titanic$Sex == "Men" & Titanic$Age == "Adult"])
}
sum_of_men
sum_of_men <-sum(Titanic$Freq[Titanic$Survived == "Yes" & Titanic$Sex == "Men" & Titanic$Age == "Adult"])
sum_of_men
sum_of_men
sum_of_men <-Titanic$Freq[Titanic$Survived == "Yes" & Titanic$Sex == "Men" & Titanic$Age == "Adult"]
sum-of_men
sum_of_men
men_num <- sum(Titanic$Freq[Titanic$Sex == "Men"])
men_num
men_num <- sum(Titanic$Freq[Titanic$Sex == "Men"])
men_num
men_num <- sum(Titanic$Freq[Titanic$Sex == "Men"])
men_num <- sum(Titanic$Freq[Titanic$Sex == "Men"])
View(Titanic)
is.data.frame(Titanic)
Titanic <- as.data.frame(Titanic)
children <- Titanic[Titanic$Age == "Child", ]
children_num <- sum(Titanic$Freq[Titanic$Age == "Child"])
largest_loss_number <- max(Titanic$Freq[Titanic$Survived == "No"])
largest_life_loss <- Titanic[Titanic$Freq == largest_loss_number & Titanic$Survived == "No", ]
survival_rate <- function(ticket_class){
men_num <- sum(Titanic$Freq[Titanic$Sex == "Men"])
}
men_num <- sum(Titanic$Freq[Titanic$Sex == "Men"])
men_num <- sum(Titanic$Freq[Titanic$Sex == "Men"])
men_num <- sum(Titanic$Freq[Titanic$Sex == "Men"])
print(men_num <- sum(Titanic$Freq[Titanic$Sex == "Men"]))
is.data.frame(Titanic = stringAsFactor == FALSE)
is.data.frame(Titanic = stringAsFactors == FALSE)
is.data.frame(Titanic stringAsFactors == FALSE)
Titanic <- as.data.frame(Titanic stringAsFactor = FALSE)
Titanic <- as.data.frame(Titanic, stringAsFactor = FALSE)
children <- Titanic[Titanic$Age == "Child", ]
children_num <- sum(Titanic$Freq[Titanic$Age == "Child"])
largest_loss_number <- max(Titanic$Freq[Titanic$Survived == "No"])
largest_life_loss <- Titanic[Titanic$Freq == largest_loss_number & Titanic$Survived == "No", ]
survival_rate <- function(ticket_class){
men_num <- sum(Titanic$Freq[Titanic$Sex == "Men"])
}
men_num <- sum(Titanic$Freq[Titanic$Sex == "Men"])
men_num
men_num <- sum(Titanic$Freq[Titanic$Sex == "Men"])
men_num
men_num <- sum(Titanic[Titanic$FreqTitanic$Sex == "Men"])
men_num <- sum([Titanic$FreqTitanic$Sex == "Men"])
men_num
source('C:/Users/amand/Desktop/201/a3-using-data-wikraa-1760332/assignment.R')
names <- c("Ayan", "Anukriti", "Alvin", "Naveen", "Andrey", "Kiran" )
math_grades <- c(89,87,81,96,99,99)
spanish_grades <- c(96,81,84,92,78,95)
tas <- data.frame(names,math_grades,spanish_grades, stringsAsFactors = FALSE)
col_names <- colnames(tas)
number_of_rows <- nrow(tas)
number_of_columns <- ncol(tas)
print(paste("The TA data frame has", number_of_rows, "rows and", number_of_columns, "coloumns", paste(colnames(tas), collapse = ", "),"."))
rownames(tas) <- tas$names
#my TA's name and grades
tas["Kiran", ]
tas$grade_diff <- tas$math_grades-tas$spanish_grades
tas$better_at_math <- tas$math_grades > tas$spanish_grades
num_better_at_math <- sum(tas$better_at_math)
print(num_better_at_math)
getwd()
write.csv(tas,"data/grade_data.csv", row.names = FALSE)
life_expectancy <- read.csv("data/life_expectancy.csv", stringsAsFactors = FALSE)
View(life_expectancy)
life_expectancy$change <- life_expectancy$le_2013 - life_expectancy$le_1960
num_small_gain <- life_expectancy[life_expectancy$change < 5, ]
print(num_small_gain)
installed.packages("dbplyr")
library("dplyr")
library("DBI")
library("DBI")
library(DBI)
library("DBI")
#installed.packages("dbplyr")
library("dplyr")
library("DBI")
library(shiny); runApp('C:/Users/amand/Desktop/201/a8-data-app-wikraa-1760332/my_ui.R')
runApp('C:/Users/amand/Desktop/201/a8-data-app-wikraa-1760332/my_ui.R')
runApp('C:/Users/amand/Desktop/201/a8-data-app-wikraa-1760332/my_ui.R')
runApp('C:/Users/amand/Desktop/201/exercises-wikraa-1760332/chapter-19-exercises/exercise-3')
# Question 3: How do cities compare to the rest of the US in terms of crime?
# cities --> high population county
library("dplyr")
library("maps")
source("analysis_final.R")
# Question 3: How do cities compare to the rest of the US in terms of crime?
# cities --> high population county
library("dplyr")
library("maps")
source("analysis_final.R")
#high population counties vs low population counties?
crime_vs_rent_2016 <- crime_vs_rent %>%
filter(year == 2016)
breaks <- c(0, 1000, 1500, 2000, 2500, Inf)
source("analysis_final.R")
crimve_vs_population <- crime_vs_rent %>%
# compare population to different types of crime
# what you need: high population counties, low population counties,
# defin high:  population > 100,500,000
# define low population: population < 100,500,000
# filter out county_name by popualation
# map with US map , every dot is a county name, color = type of crime, hue = population
#
county_map <- map_data("county")
source('C:/Users/amand/Desktop/201/final_project/analysis_final.R', echo=TRUE)
crimve_vs_population <- crime_vs_rent %>%
# compare population to different types of crime
# what you need: high population counties, low population counties,
# defin high:  population > 100,500,000
# define low population: population < 100,500,000
# filter out county_name by popualation
# map with US map , every dot is a county name, color = type of crime, hue = population
#
library("map"s)
crimve_vs_population <- crime_vs_rent %>%
# compare population to different types of crime
# what you need: high population counties, low population counties,
# defin high:  population > 100,500,000
# define low population: population < 100,500,000
# filter out county_name by popualation
# map with US map , every dot is a county name, color = type of crime, hue = population
#
library("maps")
crimve_vs_population <- crime_vs_rent %>%
# compare population to different types of crime
# what you need: high population counties, low population counties,
# defin high:  population > 100,500,000
# define low population: population < 100,500,000
# filter out county_name by popualation
# map with US map , every dot is a county name, color = type of crime, hue = population
#
library("map")
library("map")
library("maps")
county_map <- map_data("US")
source('C:/Users/amand/Desktop/201/final_project/analysis_final.R', echo=TRUE)
install.packages(usmap)
install.packages("usmap")
county_map <- map_data('county')
county_map <- county_map %>%
mutate(State = state.abb[match(toTitleCase(county_map$region), state.name)]) %>%
mutate(RegionName = paste(toTitleCase(county_map$subregion),"County"))
View(county_map)
crime_vs_rent_map_2016 <- left_join(crime_vs_rent_2016, county_map, by = c("State", "RegionName"))
View(crime_vs_rent_map_2016)
ggplot(data = crime_vs_rent_map_2016) +
geom_polygon(aes(x = long, y = lat, group = group, fill = rent_category)) +
scale_fill_manual(values=c("#b2182b", "#ef8a62", "#fddbc7", "#d1e5f0", "#67a9cf", "#2166ac")) +
ggtitle("Percent Difference in Forest Levels (1992 - 2016)") +
xlab("") +
ylab("") +
coord_quickmap()
source('C:/Users/amand/Desktop/201/final_project/analysis_final.R', echo=TRUE)
setwd("C:/Users/amand/Desktop/201/final_project")
source('C:/Users/amand/Desktop/201/final_project/analysis_final.R', echo=TRUE)
crimve_vs_population <- crime_vs_rent$population
View(crime_vs_rent)
crime_vs_population<-mutate(crime_vs_rent,
crime_per_100000_Population = crime_vs_rent$crime_rate_per_100000/crime_vs_rent$population)
crime_vs_population<-mutate(crime_vs_rent,
crime = crime_vs_rent$crime_rate_per_100000/crime_vs_rent$population)
me_vs_population<-mutate(crime_vs_rent,
crime = crime_vs_rent$crime_rate_per_100000/crime_vs_rent$population)
crimve_vs_population <- crime_vs_rent$population
crime_vs_population<-mutate(crime_vs_rent,
crime = crime_vs_rent$crime_rate_per_100000/crime_vs_population)
crimve_vs_population <- crime_vs_rent$population
crime_vs_population<-mutate(crime_vs_rent,
crime = crime_vs_rent$crime_rate_per_100000/crime_vs_population)
crime_vs_rent %>%
mutate(
crime_by_population = crime_vs_rent$crime_rate_per_100000 / crime_vs_rent$population)
crime_population <-crime_vs_rent %>%
select(population, crime_rate_per_100000) %>%
mutate(
crime_rate_by_population = crime_rate_per_100000 / population
)
crime_population <-crime_vs_rent %>%
mutate(
crime_rate_by_population = crime_rate_per_100000 / population
)
View(crime_vs_rent)
View(crime_population)
crime_population <-crime_vs_rent %>%
mutate(
crime_rate_by_population = crime_rate_per_100000 * 100000 / population
)
crime_population <-crime_vs_rent %>%
mutate(
crime_rate_by_population = crime_rate_per_100000 * 100000 / population
)
View(crime_vs_rent_2016)
View(crime_rates_county)
View(crime_population)
View(crime_population)
crime_population <-crime_vs_rent %>%
mutate(
crime_rate_by_population = crime_rate_per_100000 * 100000 / population
) %>%
summarise(
average_amount_crime_per_population = mean(crime_rate_by_population)
)
View(crime_population)
View(crime_population)
crime_population <-crime_vs_rent %>%
mutate(
crime_rate_by_population = crime_rate_per_100000 * 100000 / population
) %>%
group_by(RegionName) %>%
summarise(
average_amount_crime_per_population = mean(crime_rate_by_population)
)
View(crime_population)
View(crime_vs_rent)
View(crime_vs_rent_map_2016)
