avg_df <- forests_df %>%
filter(Series.Code == "AG.LND.FRST.K2")
avg_df
library("ggplot2")
library("knitr")
source("analysis.R")
library("ggplot2")
library("dplyr")
library("tidyr")
forests_df <- read.csv("data/WBI_Forest_Area_Cleaned.csv", stringsAsFactors = FALSE)
definitions <- read.csv("data/WBI_Definition_and_Source.csv", stringsAsFactors = FALSE)
View(forests_df)
# Wrangles data for first visualisation
avg_df <- forests_df %>%
filter(Series.Code == "AG.LND.FRST.K2")
avg_df
# Wrangles data for second visualization
us_forest_area_changes <- forests_df %>%
filter(Series.Code == "AG.LND.FRST.K2" & Country.Code == "USA") %>%
gather(key = years, value = forest_area, YR1992:YR2016)
View(us_forest_area_changes)
avg_df <- forests_df %>%
filter(Series.Code == "AG.LND.FRST.K2")
options(scipen=999)
avg_df
avg_df <- forests_df %>%
filter(Series.Code == "AG.LND.FRST.K2")
options(scipen=999)
View(avg_df)
forests_df <- forests_df %>%
options(scipen = 999)
View(forests_df)
us_forest_area_changes <- forests_df %>%
filter(Series.Code == "AG.LND.FRST.K2" & Country.Code == "USA") %>%
select(-YR1992, YR1993, YR1994, YR1995) %>%
gather(key = years_old, value = forest_area, YR1992:YR2016) %>%
mutate(years =  substr(years_old, 3, nchar(years_old)))
us_forest_area_changes <- forests_df %>%
filter(Series.Code == "AG.LND.FRST.K2" & Country.Code == "USA") %>%
select(-"YR1992", "YR1993", "YR1994", "YR1995") %>%
gather(key = years_old, value = forest_area, YR1992:YR2016) %>%
mutate(years =  substr(years_old, 3, nchar(years_old)))
us_forest_area_changes <- forests_df %>%
filter(Series.Code == "AG.LND.FRST.K2" & Country.Code == "USA") %>%
gather(key = years_old, value = forest_area, YR1992:YR2016) %>%
mutate(years =  substr(years_old, 3, nchar(years_old))) %>%
filter(5:25)
us_forest_area_changes <- forests_df %>%
filter(Series.Code == "AG.LND.FRST.K2" & Country.Code == "USA") %>%
gather(key = years_old, value = forest_area, YR1992:YR2016) %>%
mutate(years =  substr(years_old, 3, nchar(years_old))) %>%
filter(years != "1992" | "1993" | "1994" | "1995")
us_forest_area_changes <- forests_df %>%
filter(Series.Code == "AG.LND.FRST.K2" & Country.Code == "USA") %>%
gather(key = years_old, value = forest_area, YR1992:YR2016) %>%
mutate(years =  substr(years_old, 3, nchar(years_old)))
View(us_forest_area_changes)
us_forest_area_changes <- forests_df %>%
filter(Series.Code == "AG.LND.FRST.K2" & Country.Code == "USA") %>%
gather(key = years_old, value = forest_area, YR1992:YR2016) %>%
mutate(years =  substr(years_old, 3, nchar(years_old)))
filter(years != "1992" & years != "1993" & years != "1994" & years != "1995")
View(us_forest_area_changes)
us_forest_area_changes <- forests_df %>%
filter(Series.Code == "AG.LND.FRST.K2" & Country.Code == "USA") %>%
gather(key = years_old, value = forest_area, YR1992:YR2016) %>%
mutate(years =  substr(years_old, 3, nchar(years_old))) %>%
filter(years != "1992" & years != "1993" & years != "1994" & years != "1995")
View(us_forest_area_changes)
us_forest_area_changes <- forests_df %>%
filter(Series.Code == "AG.LND.FRST.K2" & Country.Code == "USA") %>%
gather(key = years_old, value = forest_area, YR1992:YR2016) %>%
mutate(years =  substr(years_old, 3, nchar(years_old))) %>%
tail(n=20)
View(us_forest_area_changes)
us_forest_area_changes <- forests_df %>%
filter(Series.Code == "AG.LND.FRST.K2" & Country.Code == "USA") %>%
gather(key = years_old, value = forest_area, YR1992:YR2016) %>%
mutate(years =  substr(years_old, 3, nchar(years_old))) %>%
tail(n=21)
View(us_forest_area_changes)
ggplot(data = diamonds) +
geom_violin(mapping = aes(x = color, y = price)) +
scale_y_log10()
ggplot(data = diamonds) +
geom_boxplot(mapping = aes(x = color, y = price))
avg_df <- forests_df %>%
filter(Series.Code == "AG.LND.FRST.K2" | Series.Code == "AG.LND.TOTL.K2")
View(avg_df)
avg_df <- forests_df %>%
filter(Series.Code == "AG.LND.FRST.K2" | Series.Code == "AG.LND.TOTL.K2") %>%
group_by(Country.Code)
View(avg_df)
avg_df <- forests_df %>%
filter(Series.Code == "AG.LND.FRST.K2" | Series.Code == "AG.LND.TOTL.K2") %>%
select(-(YR1992:YR2015))
avg_df <- forests_df %>%
filter(Series.Code == "AG.LND.FRST.K2" | Series.Code == "AG.LND.TOTL.K2") %>%
select(-(YR1992:YR2015))
View(avg_df)
avg_df <- forests_df %>%
filter(Series.Code == "AG.LND.FRST.K2" | Series.Code == "AG.LND.TOTL.K2") %>%
select(-(YR1992:YR2015)) %>%
spread(key = Series.Name, value = YR2016)
View(avg_df)
avg_df <- forests_df %>%
filter(Series.Code == "AG.LND.FRST.K2" | Series.Code == "AG.LND.TOTL.K2") %>%
spread(key = Series.Name, value = YR2016)
View(avg_df)
avg_df <- forests_df %>%
filter(Series.Code == "AG.LND.FRST.K2" | Series.Code == "AG.LND.TOTL.K2") %>%
spread(key = Series.Name, value = YR2016) %>%
select(-(YR1992:YR2015))
View(avg_df)
avg_df <- forests_df %>%
filter(Series.Code == "AG.LND.FRST.K2" | Series.Code == "AG.LND.TOTL.K2") %>%
select(-(YR1992:YR2015)) %>%
spread(key = Series.Name, value = YR2016)
View(avg_df)
avg_df <- forests_df %>%
filter(Series.Code == "AG.LND.FRST.K2" | Series.Code == "AG.LND.TOTL.K2") %>%
select(-(YR1992:YR2015)) %>%
spread(key = Series.Name, value = YR2016)
View(avg_df)
avg_df <- forests_df %>%
filter(Series.Code == "AG.LND.FRST.K2" | Series.Code == "AG.LND.TOTL.K2") %>%
select(Country.Code, Series.Name, YR2016)
View(avg_df)
avg_df <- forests_df %>%
filter(Series.Code == "AG.LND.FRST.K2" | Series.Code == "AG.LND.TOTL.K2") %>%
select(Country.Code, Series.Name, YR2016) %>%
spread(key = Series.Name, value = YR2016)
View(avg_df)
avg_df <- forests_df %>%
filter(Series.Code == "AG.LND.FRST.K2" | Series.Code == "AG.LND.TOTL.K2") %>%
select(Country.Code, Series.Name, YR2016) %>%
spread(key = Series.Name, value = YR2016) %>%
arrange(Landarea)
View(avg_df)
avg_df <- forests_df %>%
filter(Series.Code == "AG.LND.FRST.K2" | Series.Code == "AG.LND.TOTL.K2") %>%
select(Country.Code, Series.Name, YR2016) %>%
spread(key = Series.Name, value = YR2016) %>%
colnames() <- c("Country.Code", "Forest_Area", "Land_Area")
View(avg_df)
avg_df <- forests_df %>%
filter(Series.Code == "AG.LND.FRST.K2" | Series.Code == "AG.LND.TOTL.K2") %>%
select(Country.Code, Series.Name, YR2016) %>%
spread(key = Series.Name, value = YR2016) %>%
arrange(3)
View(avg_df)
avg_df <- forests_df %>%
filter(Series.Code == "AG.LND.FRST.K2" | Series.Code == "AG.LND.TOTL.K2") %>%
select(Country.Code, Series.Name, YR2016) %>%
spread(key = Series.Name, value = YR2016) %>%
colnames(avg_df) <- c("Country.Code", "Forest_Area", "Land_Area")
View(avg_df)
avg_df <- forests_df %>%
filter(Series.Code == "AG.LND.FRST.K2" | Series.Code == "AG.LND.TOTL.K2") %>%
select(Country.Code, Series.Name, YR2016) %>%
spread(key = Series.Name, value = YR2016) %>%
colnames(avg_df) <- c("Country.Code", "Forest_Area", "Land_Area")
View(avg_df)
avg_df <- forests_df %>%
filter(Series.Code == "AG.LND.FRST.K2" | Series.Code == "AG.LND.TOTL.K2") %>%
select(Country.Code, Series.Name, YR2016) %>%
spread(key = Series.Name, value = YR2016) %>%
colnames(avg_df) <- c("Dick", "Forest_Area", "Land_Area")
View(avg_df)
avg_df <- forests_df %>%
filter(Series.Code == "AG.LND.FRST.K2" | Series.Code == "AG.LND.TOTL.K2") %>%
select(Country.Code, Series.Name, YR2016) %>%
spread(key = Series.Name, value = YR2016) %>%
colnames(avg_df) <- c("Dick", "Forest_Area", "Land_Area")
View(avg_df)
avg_df <- forests_df %>%
filter(Series.Code == "AG.LND.FRST.K2" | Series.Code == "AG.LND.TOTL.K2") %>%
select(Country.Code, Series.Name, YR2016) %>%
spread(key = Series.Name, value = YR2016)
colnames(avg_df) <- c("Dick", "Forest_Area", "Land_Area")
View(avg_df)
avg_df <- forests_df %>%
filter(Series.Code == "AG.LND.FRST.K2" | Series.Code == "AG.LND.TOTL.K2") %>%
select(Country.Code, Series.Name, YR2016) %>%
spread(key = Series.Name, value = YR2016)
colnames(avg_df) <- c("Country.Code", "Forest_Area", "Land_Area")
View(avg_df)
avg_df <- forests_df %>%
filter(Series.Code == "AG.LND.FRST.K2" | Series.Code == "AG.LND.TOTL.K2") %>%
select(Country.Code, Series.Name, YR2016) %>%
spread(key = Series.Name, value = YR2016)
colnames(avg_df) <- c("Country.Code", "Forest_Area", "Land_Area")
arrange(avg_df, Land_Area)
View(avg_df)
avg_df <- forests_df %>%
filter(Series.Code == "AG.LND.FRST.K2" | Series.Code == "AG.LND.TOTL.K2") %>%
select(Country.Code, Series.Name, YR2016) %>%
spread(key = Series.Name, value = YR2016)
colnames(avg_df) <- c("Country.Code", "Forest_Area", "Land_Area")
arrange(avg_df, -Land_Area)
View(avg_df)
avg_df <- forests_df %>%
filter(Series.Code == "AG.LND.FRST.K2" | Series.Code == "AG.LND.TOTL.K2") %>%
select(Country.Code, Series.Name, YR2016) %>%
spread(key = Series.Name, value = YR2016)
colnames(avg_df) <- c("Country.Code", "Forest_Area", "Land_Area")
arrange(avg_df, -Land_Area)
head(avg_df, n = 10)
avg_df <- forests_df %>%
filter(Series.Code == "AG.LND.FRST.K2" | Series.Code == "AG.LND.TOTL.K2") %>%
select(Country.Code, Series.Name, YR2016) %>%
spread(key = Series.Name, value = YR2016)
colnames(avg_df) <- c("Country.Code", "Forest_Area", "Land_Area")
arrange(avg_df, -Land_Area)
avg_df <- forests_df %>%
filter(Series.Code == "AG.LND.FRST.K2" | Series.Code == "AG.LND.TOTL.K2") %>%
select(Country.Code, Series.Name, YR2016) %>%
spread(key = Series.Name, value = YR2016)
colnames(avg_df) <- c("Country.Code", "Forest_Area", "Land_Area")
avg_df <- avg_df %>%
arrange(-Land_Area) %>%
head(n = 10)
View(avg_df)
avg_df <- forests_df %>%
filter(Series.Code == "AG.LND.FRST.K2" | Series.Code == "AG.LND.TOTL.K2") %>%
select(Country.Code, Series.Name, YR2016) %>%
spread(key = Series.Name, value = YR2016)
colnames(avg_df) <- c("Country.Code", "Forest_Area", "Land_Area")
avg_df <- avg_df %>%
arrange(-Land_Area) %>%
head(n = 10)
avg_df <- forests_df %>%
filter(Series.Code == "AG.LND.FRST.K2" | Series.Code == "AG.LND.TOTL.K2") %>%
select(Country.Code, Series.Name, YR2016) %>%
spread(key = Series.Name, value = YR2016)
colnames(avg_df) <- c("Country.Code", "Forest_Area", "Land_Area")
avg_df <- avg_df %>%
arrange(-Land_Area) %>%
head(n = 10)
avg_df
forests_df <- read.csv("data/WBI_Forest_Area_Cleaned.csv", stringsAsFactors = FALSE)
options(scipen=999)
map_data("world")
map_data("world")
install.packages("maps")
library("maps")
map_data("world")
map_df <- map_data("world")
View(map_df)
map_df <- map_data("world")
map_df <- map_df %>%
mutate(Country.Code = iso.alpha(map_df$region, n = 3))
View(map_df)
total_forest_area_df <- forests_df %>%
filter(Series.Code == "AG.LND.FRST.K2")
View(total_forest_area_df)
forest_and_map_df <- left_join(map_df, total_forest_area_df, by =  "Country.Code")
View(forest_and_map_df)
map_df <- map_data("world")
View(map_df)
library("maps")
library("dplyr")
library("tidyr")
library("ggplot2")
map_df <- map_data("world")
View(map_df)
forest_and_map_df <- forest_and_map_df %>%
arrange(YR2016)
View(forest_and_map_df)
forest_and_map_df <- forest_and_map_df %>%
arrange(X)
View(forest_and_map_df)
forest_and_map_df <- forest_and_map_df %>%
arrange(-group)
View(forest_and_map_df)
forest_and_map_df <- forest_and_map_df %>%
arrange(-YR2016)
forest_and_map_df <- forest_and_map_df %>%
arrange(-YR2016)
View(forest_and_map_df)
forest_and_map_df <- left_join(total_forest_area_df, map_df, by =  "Country.Code")
forest_and_map_df <- forest_and_map_df %>%
arrange(-YR2016)
View(forest_and_map_df)
map_df <- map_data("world")
View(map_df)
map_df <- map_df %>%
mutate(Country.Code = iso.alpha(map_df$region, n = 3))
# Extracts the forest area in km squared from the forests dataframe.
total_forest_area_df <- forests_df %>%
filter(Series.Code == "AG.LND.FRST.ZS")
# Joins the two above data frames by country code
forest_and_map_df <- left_join(total_forest_area_df, map_df, by =  "Country.Code")
forest_and_map_df <- forest_and_map_df %>%
arrange(-YR2016)
View(forest_and_map_df)
map_df <- map_data("world")
View(map_df)
map_df <- map_df %>%
mutate(Country.Code = iso.alpha(map_df$region, n = 3))
# Extracts the forest area in km squared from the forests dataframe.
total_forest_area_df <- forests_df %>%
filter(Series.Code == "AG.LND.FRST.ZS")
# Joins the two above data frames by country code
forest_and_map_df <- left_join(total_forest_area_df, map_df, by =  "Country.Code")
forest_and_map_df <- forest_and_map_df %>%
# arrange(-YR2016)
View(forest_and_map_df)
map_df <- map_data("world")
View(map_df)
map_df <- map_df %>%
mutate(Country.Code = iso.alpha(map_df$region, n = 3))
# Extracts the forest area in km squared from the forests dataframe.
total_forest_area_df <- forests_df %>%
filter(Series.Code == "AG.LND.FRST.ZS")
# Joins the two above data frames by country code
forest_and_map_df <- left_join(total_forest_area_df, map_df, by =  "Country.Code")
# forest_and_map_df <- forest_and_map_df %>%
# arrange(-YR2016)
View(forest_and_map_df)
forest_and_map_df <- forest_and_map_df %>%
arrange(YR2016)
View(forest_and_map_df)
bins <- cut(forest_and_map_df$YR2016, breaks=c(20, 40, 60, 80, 100), labels=c("0-20", "20-40", "40-60", "60-80", "80-100"))
View(bins)
bins <- cut(forest_and_map_df$YR2016, breaks=c(20, 40, 60, 80, Inf), labels=c("0-20", "20-40", "40-60", "60-80", "80-100"))
View(bins)
bins <- cut(forest_and_map_df$YR2016, breaks=c(20, 40, 60, 80, 100, Inf), labels=c("0-20", "20-40", "40-60", "60-80", "80-100"))
View(bins)
bins <- cut(forest_and_map_df$YR2016, breaks=c(20.0, 40.0, 60.0, 80.0, 100.0, Inf), labels=c("0-20", "20-40", "40-60", "60-80", "80-100"))
bins
forest_and_map_df <- forest_and_map_df %>%
arrange(YR2016)
View(forest_and_map_df)
forest_and_map_df <- forest_and_map_df %>%
arrange(YR2016)
bins <- cut(forest_and_map_df$YR2016, breaks=c(20.0, 40.0, 60.0, 80.0, 100.0, Inf), labels=c("0-20", "20-40", "40-60", "60-80", "80-100"))
bins
forest_and_map_df <- forest_and_map_df %>%
arrange(-YR2016)
bins <- cut(forest_and_map_df$YR2016, breaks=c(20, 40, 60, 80, 100, Inf), labels=c("0-20", "20-40", "40-60", "60-80", "80-100"))
bins
bins <- cut(forest_and_map_df$YR2016, breaks=c(19, 40, 60, 80, 100, Inf), labels=c("0-20", "20-40", "40-60", "60-80", "80-100"))
bins
forest_and_map_df <- forest_and_map_df %>%
arrange(YR2016)
bins <- cut(forest_and_map_df$YR2016, breaks=c(19, 40, 60, 80, 100, Inf), labels=c("0-20", "20-40", "40-60", "60-80", "80-100"))
bins
bins <- cut(forest_and_map_df$YR2016, breaks=c(0, 20, 40, 60, 80, 100), labels=c("0-20", "20-40", "40-60", "60-80", "80-100"))
bins
forest_and_map_df <- forest_and_map_df %>%
arrange(-YR2016)
bins <- cut(forest_and_map_df$YR2016, breaks=c(0, 20, 40, 60, 80, 100), labels=c("0-20", "20-40", "40-60", "60-80", "80-100"))
bins
bins <- cut(forest_and_map_df$YR2016, breaks=c(0, 20, 40, 60, 80, 100), labels=c("0-20", "20-40", "40-60", "60-80", "80-100"))
mutate(forest_and_map_df, factor_data = bins)
View(forest_and_map_df)
forest_and_map_df <- forest_and_map_df %>%
mutate(factor_data = bins)
View(forest_and_map_df)
forest_and_map_df <- forest_and_map_df %>%
arrange(YR2016)
bins <- cut(forest_and_map_df$YR2016, breaks=c(-1, 20, 40, 60, 80, 100), labels=c("0-20", "20-40", "40-60", "60-80", "80-100"))
forest_and_map_df <- forest_and_map_df %>%
mutate(factor_data = bins)
View(forest_and_map_df)
forest_and_map_df <- forest_and_map_df %>%
mutate(factor_data = bins) %>%
filter(Country.Code == "USA")
View(forest_and_map_df)
forest_and_map_df <- forest_and_map_df %>%
mutate(factor_data = bins)
View(forest_and_map_df)
forest_and_map_df <- left_join(total_forest_area_df, map_df, by =  "Country.Code")
forest_and_map_df <- forest_and_map_df %>%
arrange(YR2016)
bins <- cut(forest_and_map_df$YR2016, breaks=c(-1, 20, 40, 60, 80, 100), labels=c("0-20", "20-40", "40-60", "60-80", "80-100"))
forest_and_map_df <- forest_and_map_df %>%
mutate(factor_data = bins)
View(forest_and_map_df)
library("knitr")
source("analysis.R")
library("ggplot2")
knitr::opts_chunk$set(echo = TRUE)
ggplot(data = avg_land_and_forest_df) +
geom_text(mapping = aes(x = Land_Area , y = Forest_Area, label = Country.Code)) +
scale_y_log10() +
scale_x_log10() +
labs(title = "Land Area vs Forest Area in 2016", x = "Land Area (in sq. km)", y = "Forest Area (in sq. km)")
ggplot(data = us_forest_area_changes) +
geom_point(mapping = aes(x = years, y = forest_area), color = 636) +
labs(title = "Forest Area Levels for the US", x = "Years", y = "Forest Area (in sq. km)")
ggplot(data = forest_and_map_df) +
geom_polygon(mapping = aes(x= long, y = lat, color = factor_data), color = "white", size = .1) +
coord_map() +
scale_color_brewer(palette = "Set3")
install.packages("evaluate")
install.packages("evaluate")
library("knitr")
source("analysis.R")
library("ggplot2")
knitr::opts_chunk$set(echo = TRUE)
ggplot(data = forest_and_map_df) +
geom_polygon(mapping = aes(x= long, y = lat, color = factor_data), color = "white", size = .1) +
coord_map() +
scale_color_brewer(palette = "Set3")
#organizes/gathers yearly rent prices
rent_price <- rent_price %>%
select(-Metro, -StateCodeFIPS, -MunicipalCodeFIPS, -SizeRank) %>%
mutate(county_name = (paste0(RegionName, ", ", State))) %>%
gather(key = "year", value = "rent", -RegionName, -State, -county_name)
library(dplyr)
library(tidyr)
library(ggplot2)
# library(usmap)
library(tools)
crime_rates_county <- read.csv("data/crime_data_w_population_and_crime_rate.csv", stringsAsFactors = FALSE)
rent_price <- read.csv("data/county_median_rental_price.csv", stringsAsFactors = FALSE)
#organizes/gathers yearly rent prices
rent_price <- rent_price %>%
select(-Metro, -StateCodeFIPS, -MunicipalCodeFIPS, -SizeRank) %>%
mutate(county_name = (paste0(RegionName, ", ", State))) %>%
gather(key = "year", value = "rent", -RegionName, -State, -county_name)
rent_price$year <- substr(rent_price$year, 2, 5)
rent_price <- rent_price %>%
filter(!is.na(rent)) %>%
group_by(year, RegionName, State, county_name) %>%
summarize(rent_value = median(rent))
# Creates crime data frame
crime_rates_county <- crime_rates_county %>%
select(county_name, crime_rate_per_100000, index, MURDER, RAPE, ROBBERY, AGASSLT,
BURGLRY, LARCENY, MVTHEFT, ARSON, population, FIPS_ST)
# attaches crime df to the rent df with the FIPS codes for plotting
crime_vs_rent <- left_join(rent_price, crime_rates_county, by = "county_name")
#--------------------------QUESTION 1-----------------------------#
# How do crime rates affect rental prices after 2016 in areas of high and low crime.
# Creates a data frame for the top 5 highest counties by crime rate for 2016
high_crimes <- crime_vs_rent %>%
arrange(-crime_rate_per_100000) %>%
head(n = 39) %>%
select(year, RegionName, State, rent_value, crime_rate_per_100000)
# Creates a data frame for the lowest 5 counties by crime rate for 2016
low_crimes <- crime_vs_rent %>%
arrange(crime_rate_per_100000) %>%
head(n=35) %>%
select(year, RegionName, State, rent_value, crime_rate_per_100000)
# I think for visualizations for Q1, we can simply display the two above data frames. Analysis can then be intertwined between these two displays
# If we want we can also create a graph for each data frame using ggplot, something like this in the server:
# p <- ggplot(data = high_crimes) +
# geom_point(mapping = aes(x = rent_value , y = crime_rate_per_100000, color = RegionName))
# and the same thing for low crimes. These two data frames are almost exactly the same in size and thus can be compared very easily.
#-----------------------------------------------------------------#
#--------------------------QUESTION 2-----------------------------#
# What is the most common crime per each category of rent price? (for 2016)
mean_NA <- function(x) {
if (all(is.na(x)))
x[NA_integer_]
else mean(x, na.rm = TRUE)
}
crime_vs_rent_2016 <- crime_vs_rent %>%
filter(year == 2016)
breaks <- c(0, 1000, 1500, 2000, 2500, Inf)
crime_vs_rent_2016 <- mutate(crime_vs_rent_2016, rent_category = cut(rent_value,
breaks, labels = c("$0 to $1000", "$1000 to $1500", "$1500 to $2000", "$2000 to $2500", "$2500+")))
# df great for a interactive plot (select the inputted crime)
crime_trends_vs_rent <- crime_vs_rent_2016 %>%
group_by(rent_value) %>%
summarize(Murder = mean_NA(MURDER/population), Rape = mean_NA(RAPE/population), Robbery = mean_NA(ROBBERY/population),
`Aggravated Assault` = mean_NA(AGASSLT/population), Burglary = mean_NA(BURGLRY/population), Larceny = mean_NA(LARCENY/population),
`Car Theft` = mean_NA(MVTHEFT/population), Arson = mean_NA(ARSON/population))
ggplot(data = crime_trends_vs_rent) +
geom_smooth(mapping = aes(x = rent_value, y = Murder)) +
geom_point(mapping = aes(x = rent_value, y = Murder))
#-- below is the per category stuff --#
# methodology for finding the most popular crime:
#    -per each rent category (broken above), the average is taken for each crime
#    -the average and std dev is taken for each type of crime, and therefore z-scores are
#         assigned for each rent_category/crime type
#    -based upon the z-scores, the most positively extraneous is chosen as the most popular,
#         which does not mean at all that this rent category has the highest rate of it, just
#         that this rent category has the most abnormal amount of this type of crime.
crime_per_category <- crime_vs_rent_2016 %>%
group_by(rent_category) %>%
summarize(ave_murder = mean_NA(MURDER/population), ave_rape = mean_NA(RAPE/population), ave_robbery = mean_NA(ROBBERY/population),
ave_agrasslt = mean_NA(AGASSLT/population), ave_burg = mean_NA(BURGLRY/population), ave_larc = mean_NA(LARCENY/population),
ave_gta = mean_NA(MVTHEFT/population), ave_arson = mean_NA(ARSON/population))
rearranged_crimes <- crime_per_category %>%
gather(key = crime, value = crime_by_pop, -rent_category)
ave_crime <- rearranged_crimes %>%
group_by(crime) %>%
summarize(average = mean(crime_by_pop), stddev = sd(crime_by_pop))
fav_crime_by_rent <- left_join(rearranged_crimes, ave_crime, by = "crime") %>%
mutate(crime_diff = (crime_by_pop - average)/stddev) %>%
group_by(rent_category) %>%
filter(crime_diff == max(crime_diff))
#-----------------------------------------------------------------#
# below is the county map for plotting stuff
# along with an example for plotting a map.
county_map <- map_data('county')
county_map <- county_map %>%
mutate(State = state.abb[match(toTitleCase(county_map$region), state.name)]) %>%
mutate(RegionName = paste(toTitleCase(county_map$subregion),"County"))
setwd("~/info201/final_project/rent_vs_crime_final")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
